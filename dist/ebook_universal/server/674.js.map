{"version":3,"file":"674.js","mappings":"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","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      // {\n      //   path: '',\n      //   // redirectTo: 'login',\n      //   pathMatch: 'full'\n      // },\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      {\n        path: 'signup',\n        component: SignupComponent\n      },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [LoginComponent,SignupComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgbModalConfig, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport Swal from 'sweetalert2';\nimport { AuthService } from '../../services/auth.service';\nimport { isPlatformBrowser } from '@angular/common';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  // emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  emailRegex = /^[a-z0-9._-]+@[a-z0-9.-]+\\.[a-z]{2,6}$/;\n  submitted = false;\n  Errormessage = \"Required.\";\n  passwordErrorMessage = \"Password is too short\";\n  hasError: boolean = false;\n  forgotPasswordForm!: FormGroup;\n  forgotPasswordStatus = 'forgotPassword';\n  passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n  passwordNotMatch = \"\";\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private apiService: ApiService,\n    private router: Router,\n    private toastr: ToastrService,\n    private modalService: NgbModal,\n    config: NgbModalConfig,\n    public authService: AuthService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if (localStorage.getItem('authorization') != null) this.router.navigate(['/home']);\n    }\n\n    this.loginForm = this.formBuilder.group({\n      email: [\"\", Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern(this.emailRegex),\n        Validators.minLength(3),\n        Validators.maxLength(320),\n      ])\n      ],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]]\n    });\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: [\"\", Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern(this.emailRegex),\n        Validators.minLength(3),\n        Validators.maxLength(320),\n      ])\n      ],\n      otp: [\"\", Validators.required],\n      password: ['', [\n        Validators.required,\n        Validators.pattern(this.passwordRegex),\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]],\n      confirmPassword: ['', [\n        Validators.required,\n        Validators.pattern(this.passwordRegex),\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]],\n    }, {\n      validators: this.password.bind(this)\n    })\n  }\n\n  login() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.apiService.postData(\"user/signin\", this.loginForm.value).subscribe(\n      (result: any) => {\n        if (isPlatformBrowser(this.platformId)) {\n          localStorage.setItem(\"name\", result.data.name);\n          localStorage.setItem(\"authorization\", result.data.accessToken);\n          this.toastr.success(\"Logged In.\", \"Success!\");\n          this.router.navigate(['/home']);\n        }\n      },\n      (error) => {\n        this.hasError = true;\n        this.toastr.error(error.error.responseMessage, \"Error!\");\n      }\n    );\n  }\n\n  openModal(content: any) {\n    this.modalService.open(content);\n  }\n\n  //  forgot password email  //\n  forgotPassword() {\n    console.log(\"email sent\", this.forgotPasswordForm.value)\n    let obj = {\n      'email': this.forgotPasswordForm.value.email\n    }\n    this.apiService.postData(\"user/forgotPassword\", obj).subscribe(\n      (result: any) => {\n        this.toastr.success(\"Email sent please check.\", \"Success!\");\n        this.forgotPasswordStatus = 'otp';\n      },\n      (error) => {\n        this.hasError = true;\n        this.toastr.error(error.error.responseMessage, \"Error!\");\n      }\n    );\n  }\n\n  // send otp //\n  sendLink() {\n    let obj = {\n      email: this.forgotPasswordForm.value.email,\n      otp: this.forgotPasswordForm.value.otp\n    }\n    this.apiService.postData(\"user/verifyOTP\", obj).subscribe(\n      (result: any) => {\n        this.toastr.success(\"Code sent.\", \"Success!\");\n        this.forgotPasswordStatus = 'changePassword';\n      },\n      (error) => {\n        this.hasError = true;\n        this.toastr.error(error.error.responseMessage, \"Error!\");\n      }\n    );\n  }\n\n  password(formGroup: FormGroup) {\n    const password = formGroup.get('password');\n    const confirmPassword = formGroup.get('confirmPassword');\n    return password?.value === confirmPassword?.value ? this.passwordNotMatch = \"\" : this.passwordNotMatch = \"Password don't match\";\n  }\n\n  //  change password  //\n  changePassword(func: any) {\n    this.submitted = true;\n    let obj = {\n      'email': this.forgotPasswordForm.value.email,\n      'password': this.forgotPasswordForm.value.password\n    }\n    this.apiService.postData('user/resetPassword', obj).subscribe(\n      (result: any) => {\n        this.toastr.success(\"Password Changed.\", \"Success!\");\n        func;\n        this.router.navigateByUrl('/login');\n      },\n      (error) => {\n        this.hasError = true;\n        this.toastr.error(error.error.responseMessage, \"Error!\");\n      }\n    );\n  }\n}\n","<div class=\"loginPage\">\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-12\">\n                    <div class=\"text-center\">\n\n                    </div>\n                    <div class=\"loginMain  m-auto\">\n                        <div class=\"m-auto text-center\">\n                            <img src=\"assets/images/logoMain.svg\" alt=\"Logo\" />\n                            <h1>Ieiet</h1>\n                        </div>\n\n                        <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n                            <div class=\"form-group\">\n                                <label for=\"email\">E-pasta adrese:</label>\n                                <div class=\"emailIcons\">\n                                    <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\"\n                                        placeholder=\"E-pasta adrese\" name=\"email\">\n                                </div>\n                            </div>\n                            <div>\n                                <div class=\"text-danger\" *ngIf=\"\n\t\t\t\t\t\t\t\t  submitted &&\n\t\t\t\t\t\t\t\t  loginForm.get('email')?.hasError('required')\n\t\t\t\t\t\t\t\t\">\n                                    {{ Errormessage }}\n                                </div>\n                                <div class=\"text-danger\" *ngIf=\"\n\t\t\t\t\t\t\t\t  submitted &&\n\t\t\t\t\t\t\t\t  loginForm.get('email')?.hasError('pattern')\n\t\t\t\t\t\t\t\t\">\n                                Lūdzu ievadiet savu e-pasta adresi.\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"pwd\">Parole:</label>\n                                <div class=\"passwordIcon\">\n                                    <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"pwd\"\n                                        placeholder=\"Parole\" name=\"pswd\">\n                                </div>\n                            </div>\n                            <div class=\"errors\">\n                                <div class=\"text-danger\"\n                                    *ngIf=\"submitted && loginForm.get('password')?.hasError('required')\">\n                                    {{ Errormessage }}\n                                </div>\n                                <div class=\"text-danger\"\n                                    *ngIf=\"submitted && loginForm.get('password')?.hasError('minLength')\">\n                                    {{ passwordErrorMessage }}\n                                </div>\n                            </div>\n                            <div class=\"form-group forgotPassword\">\n                                <label class=\"form-check-label\">\n                                    <a (click)=\"openModal(content)\">Aizmirsāt paroli?</a>\n                                </label>\n                            </div>\n                            <div class=\"form-group text-center\">\n                                <button type=\"submit\" class=\"btn btn-primary\">Ieiet</button>\n                            </div>\n                            <div class=\"lowerLinks text-center\">\n                                <p class=\"or\">vai</p>\n                                <ul>\n                                    <li (click)=\"authService.FacebookAuth('signIn')\">\n                                        <img src=\"assets/images/facebookIcon.png\" alt=\"Facebook\" />\n                                    </li>\n                                    <li (click)=\"authService.GoogleAuth('signIn')\">\n                                        <img src=\"assets/images/googleIcon.png\" alt=\"Google Icon\" />\n                                    </li>\n                                </ul>\n                                <p>Neesat reģistrējies? <a href=\"/signup\">Reģistrēties</a></p>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<ng-template #content let-c=\"close\" let-d=\"dismiss\">\n    <div class=\"backCustom\">\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">{{ forgotPasswordStatus ? 'Verifikācijas kods' :'Forgot\n                Password' }}</h4>\n            <button type=\"button\" class=\" btn buttonClose\" aria-label=\"Close\" (click)=\"d('Cross click')\">\n                <img src=\"assets/images/close 2.png\" />\n            </button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"sendLink()\" *ngIf=\"forgotPasswordStatus == 'otp'\">\n                <div class=\"form-group\">\n                    <label for=\"otp\">Verifikācijas kods:</label>\n                    <div class=\"emailIcons\">\n                        <input type=\"text\" formControlName=\"otp\" class=\"form-control\" id=\"otp\"\n                            placeholder=\"Verifikācijas kods\" name=\"otp\">\n                    </div>\n                </div>\n                <div>\n                    <div class=\"text-danger\" *ngIf=\"\n                    submitted &&\n                    forgotPasswordForm.get('otp')?.hasError('required')\n                  \">\n                        {{ Errormessage }}\n                    </div>\n                </div>\n                <div class=\"form-group popButton\">\n                    <button type=\"submit\" class=\"btn buttonSendLink\">Verificējiet</button>\n                </div>\n            </form>\n            <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"forgotPassword()\"\n                *ngIf=\"forgotPasswordStatus=='forgotPassword'\">\n                <div class=\"form-group\">\n                    <label for=\"email\">E-pasta adrese:</label>\n                    <div class=\"emailIcons\">\n                        <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\"\n                            placeholder=\"E-pasta adrese\" name=\"email\">\n                    </div>\n                </div>\n                <div>\n                    <div class=\"text-danger\" *ngIf=\"\n                      submitted &&\n                      forgotPasswordForm.get('email')?.hasError('required')\n                    \">\n                        {{ Errormessage }}\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"\n                      submitted &&\n                      forgotPasswordForm.get('email')?.hasError('pattern')\n                    \">\n                    Lūdzu ievadiet savu e-pasta adresi.\n                    </div>\n                </div>\n                <div class=\"form-group popButton\">\n                    <button type=\"submit\" class=\"btn buttonSendLink\">Nosūtīt jaunu saiti</button>\n                </div>\n            </form>\n            <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"changePassword(c())\"\n                *ngIf=\"forgotPasswordStatus=='changePassword'\">\n                <div class=\"form-group\">\n                    <label for=\"pwd\">Jauna parole:</label>\n                    <div class=\"passwordIcon\">\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"pwd\"\n                            placeholder=\"Jauna parole\" name=\"pswd\">\n                    </div>\n                </div>\n                <div class=\"errors\">\n                    <div class=\"text-danger\"\n                        *ngIf=\"submitted && forgotPasswordForm.get('password')?.hasError('required')\">\n                        {{ Errormessage }}\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"\n                      \n                    forgotPasswordForm.get('password')?.hasError('pattern')\n                    \">\n                        Please enter valid password.\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"forgotPasswordForm.get('password')?.hasError('minLength')\">\n                        {{ passwordErrorMessage }}\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"pwd\">Apstipriniet paroli:</label>\n                    <div class=\"passwordIcon\">\n                        <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" id=\"pwd\"\n                            placeholder=\"Apstipriniet paroli\" name=\"pswd\">\n                    </div>\n                </div>\n                <div class=\"errors\">\n                    <div class=\"text-danger\"\n                        *ngIf=\"submitted && forgotPasswordForm.get('confirmPassword')?.hasError('required')\">\n                        {{ Errormessage }}\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"\n                      \n                    forgotPasswordForm.get('confirmPassword')?.hasError('pattern')\n                    \">\n                        Please enter valid password.\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"forgotPasswordForm.get('password')?.hasError('minLength')\">\n                        {{ passwordErrorMessage }}\n                    </div>\n                    <div class=\"text-danger\" *ngIf=\"submitted\">\n                        {{ passwordNotMatch }}\n                    </div>\n                </div>\n                <div class=\"form-group popButton\">\n                    <button type=\"submit\" class=\"btn buttonSendLink\">Nosūtīt jaunu saiti</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</ng-template>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport Swal from 'sweetalert2';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  userForm!: FormGroup;\n  // emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  emailRegex = /^[a-z0-9._-]+@[a-z0-9.-]+\\.[a-z]{2,6}$/;\n  submitted = false;\n  Errormessage = \"Required.\";\n  passwordErrorMessage = \"Password is too short\";\n  passwordNotMatch = \"\";\n  hasError: boolean = false;\n  hasErrorCheckbox: boolean = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private apiService: ApiService,\n    private toastr: ToastrService,\n    private router: Router,\n    public authService: AuthService\n  ) { }\n  ngOnInit(): void {\n    this.userForm = this.formBuilder.group({\n      uname: [\"\", Validators.required],\n      checkbox: [true, Validators.required],\n      email: [\"\", Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern(this.emailRegex),\n        Validators.minLength(3),\n        Validators.maxLength(320),\n      ])\n      ],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]],\n      confirmPassword: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]],\n    }, {\n      validators: this.password.bind(this)\n    });\n    this.hasErrorCheckbox = this.userForm.value.checkbox;\n  }\n  password(formGroup: FormGroup) {\n    const password = formGroup.get('password');\n    const confirmPassword = formGroup.get('confirmPassword');\n    return password?.value === confirmPassword?.value ? this.passwordNotMatch = \"\" : this.passwordNotMatch = \"Password don't match\";\n  }\n  registerUser() {\n    this.submitted = true;\n    if (this.userForm.invalid) {\n      return;\n    }\n    let obj = {\n      'name': this.userForm.value.uname,\n      'email': this.userForm.value.email,\n      'password': this.userForm.value.password\n    }\n    this.apiService.postData('user/signup', obj).subscribe(\n      (result: any) => {\n          this.toastr.success('Lietotājs ir veiksmīgi izveidots', 'Success!');\n          this.router.navigateByUrl('/login');\n      },\n      (error) => {\n        this.hasError = true;\n        this.toastr.error(error.error.responseMessage, 'Kļūda!');\n      }\n    );\n  }\n\n  checkValue(event: any) {\n    this.hasErrorCheckbox = event.currentTarget.checked;\n  }\n}\n","<div class=\"signupPage\">\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-12\">\n                    <div class=\"text-center\">\n\n                    </div>\n                    <div class=\"signupMain  m-auto\">\n                        <div class=\"m-auto text-center\">\n                            <img src=\"assets/images/logoMain.svg\" alt=\"Logo\" /><br>\n                            <h1>Reģistrēties</h1>\n                        </div>\n                        <form [formGroup]=\"userForm\" (ngSubmit)=\"registerUser()\">\n                            <div class=\"form-group\">\n                                <label for=\"email\">Lietotājvārds:</label>\n                                <div class=\"userIcon\">\n                                    <input type=\"email\" class=\"form-control\" placeholder=\"Lietotājvārds\"\n                                        formControlName=\"uname\" name=\"email\">\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"email\">E-pasta adrese:</label>\n                                <div class=\"emailIcons\">\n                                    <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                                        placeholder=\"E-pasta adrese\" name=\"email\" required [ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\t'is-invalid':\n\t\t\t\t\t\t\t\t\t\t\tsubmitted && userForm.controls['email'].invalid\n\t\t\t\t\t\t\t\t\t\t}\">\n                                </div>\n                            </div>\n                            <div>\n                                <div class=\"text-danger\" *ngIf=\"\n\t\t\t\t\t\t\t\t  submitted &&\n\t\t\t\t\t\t\t\t  userForm.get('email')?.hasError('required')\n\t\t\t\t\t\t\t\t\">\n                                    {{ Errormessage }}\n                                </div>\n                                <div class=\"text-danger\" *ngIf=\"\n\t\t\t\t\t\t\t\t  submitted &&\n\t\t\t\t\t\t\t\t  userForm.get('email')?.hasError('pattern')\n\t\t\t\t\t\t\t\t\">\n                                    Please enter valid address.\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"pwd\">Parole:</label>\n                                <div class=\"passwordIcon\">\n                                    <input type=\"password\" formControlName=\"password\" class=\"form-control\"\n                                        placeholder=\"Parole\" name=\"pswd\" required [ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\t'is-invalid':\n\t\t\t\t\t\t\t\t\t\t\tsubmitted && userForm.controls['password'].invalid\n\t\t\t\t\t\t\t\t\t\t}\">\n                                </div>\n                            </div>\n                            <div class=\"errors\">\n                                <div class=\"text-danger\"\n                                    *ngIf=\"submitted && userForm.get('password')?.hasError('required')\">\n                                    {{ Errormessage }}\n                                </div>\n                                <div class=\"text-danger\"\n                                    *ngIf=\"submitted && userForm.get('password')?.hasError('minLength')\">\n                                    {{ passwordErrorMessage }}\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label for=\"pwd\">Apstipriniet paroli:</label>\n                                <div class=\"passwordIcon\">\n                                    <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\"\n                                        placeholder=\"Apstipriniet paroli\" name=\"pswd\">\n                                </div>\n                            </div>\n                            <div class=\"text-danger\">\n                                {{ passwordNotMatch }}\n                            </div>\n                            <div class=\"form-group form-check\">\n                                <label class=\"form-check-label d-flex align-items-center\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" name=\"remember\"\n                                        (change)=\"checkValue($event)\" checked formControlName=\"checkbox\" required>&nbsp;\n                                    Piekrītu lietošanas noteikumiem\n                                </label>\n                            </div>\n                            <div class=\"text-danger\" *ngIf=\"!hasErrorCheckbox\">\n                                {{ \"Please check the checkbox\" }}\n                            </div>\n                            <div class=\"form-group text-center\">\n                                <!-- <button type=\"submit\" class=\"btn btn-primary\">Submit</button> -->\n                                <button type=\"submit\" class=\"btn btn-primary\">Reģistrēties</button>\n                            </div>\n                        </form>\n                        <div class=\"lowerLinks text-center\">\n                            <!-- <p class=\"or\">or</p> -->\n                            <p class=\"or\">vai</p>\n                            <ul>\n                                <li (click)=\"authService.FacebookAuth('signUp')\">\n                                    <!-- <a href=\"#\"> -->\n                                    <img src=\"assets/images/facebookIcon.png\" alt=\"Facebook\" />\n                                    <!-- </a> -->\n                                </li>\n                                <li (click)=\"authService.GoogleAuth('signUp')\">\n                                    <!-- <a href=\"#\"> -->\n                                    <img src=\"assets/images/googleIcon.png\" alt=\"Google Icon\" />\n                                    <!-- </a> -->\n                                </li>\n                            </ul>\n                            <!-- <p>Already have an account? <a href=\"#\">Login here</a></p> -->\n                            <p>Jau ir savs konts? <a href=\"/login\">Ieiet</a></p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}